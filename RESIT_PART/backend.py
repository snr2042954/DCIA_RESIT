import pandas as pd
import numpy as np

def load_student_data(filepath):
    """
    Load the student-microgoal matrix, interpreting -2 as missing values,
    dropping any rows with illogical values (outside [-2, 2]),
    and clipping all values into the logical range [-2, 2].
    Returns a DataFrame with NaNs where data was missing.

    args:
        filepath (str)
    output:
        df (DataFrame)
    """

    # load in the csv
    df = pd.read_csv(filepath, index_col=0)

    # Some data cleaning
    df = df.replace(-2, np.nan)
    valid_mask = (df.le(2) & df.ge(-2)) | df.isna()
    df = df[valid_mask.all(axis=1)]
    df = df.clip(lower=-2, upper=2)

    return df

def shorten_data(df,n_students):
    """
    Shortens the dataframe generated by load_student_data to a predefined length.
    Length is as discussed with professor Latifi of the DCiA course at JADS.
    Selected rows are based on non_NaN population and set with n_students.

    args:
        df (DataFrame)
        n_students (int)
    output:
        df (DataFrame)
    """

    # Count non-NaN values in each row and sort data on this metric
    df['non_null_count'] = df.notna().sum(axis=1)
    df_sorted = df.sort_values(by='non_null_count', ascending=False)
    df_sorted = df_sorted.drop(columns='non_null_count')

    # Select most populated rows
    df_top_populated = df_sorted.head(n_students)

    # print selection stats
    print(f"Retained {len(df_top_populated)} rows out of {len(df_sorted)}.")

    return df_top_populated

data = shorten_data(load_student_data('student_abilities_pivoted.csv'),n_students=100)
print(data.head())
